# Copyright 2024 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Create Pull Request'
description: |-
  Use this action to create a pull request from a GitHub workflow.

inputs:
  token:
    description: 'The GitHub PAT or app installation token to use for calling GitHub APIs. NOTE: This cannot be the default GitHub token as workflows will not run for pull requests using that token.'
    required: true
  head_branch:
    description: 'The pull request head branch name.'
    required: true
  base_branch:
    description: 'The pull request base branch name. Defaults to `main`.'
    required: false
    default: 'main'
  draft:
    description: 'Create the release as a draft.'
    required: true
    type: 'boolean'
    default: false
  pull_request_title:
    description: 'The pull request title.'
    required: true
  pull_request_body:
    description: 'The pull request body. Defaults to ``.'
    required: false
    default: ''
  max_retries:
    description: 'The maxiumum number of retries when handling failures. Defaults to `3`.'
    required: false
    default: '3'

runs:
  using: 'composite'
  steps:
    - name: 'Make updates'
      id: 'commit'
      env:
        HEAD_BRANCH: '${{ inputs.head_branch }}'
      shell: 'bash'
      run: |-
        SHA=$(git rev-parse HEAD)
        echo "sha=${SHA}" >> $GITHUB_OUTPUT

    # Commit files using the GitHub API to ensure commits are signed
    - name: 'Create Commits'
      id: 'create-commits'
      uses: 'actions/github-script@98814c53be79b1d30f795b907e553d8679345975' # ratchet:actions/github-script@v6
      env:
        HEAD_BRANCH: '${{ inputs.head_branch }}'
        BASE_BRANCH: '${{ inputs.base_branch }}'
        PR_TITLE: '${{ inputs.pull_request_title }}'
        PR_BODY: '${{ inputs.pull_request_body }}'
      with:
        github-token: '${{ inputs.token }}'
        retries: '${{ inputs.max_retries }}'
        script: |-
          try {
            const fs = require("fs/promises");

            const headSHA = "${{ steps.commit.outputs.sha }}";
            const { data: headCommit } = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: headSHA,
            })

            console.log(headCommit)

            const { data: commit } = await github.rest.git.createCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              message: process.env.PR_TITLE,
              parents: [headSHA],
              tree: headCommit.commit.tree.sha,
            });

            console.log(commit)

            core.info(`Updating PR branch ref
              owner: ${context.repo.owner}
              repo:  ${context.repo.repo}
              ref:   heads/${process.env.HEAD_BRANCH}
              sha:   ${commit.sha}
            `);

            // update the pr branch reference with the new git tree
            await github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "heads/${{ inputs.head_branch }}",
              sha: commit.sha,
              force: true
            });
          } catch (err) {
            core.error(err);
            core.setFailed(`Failed to create commits for pull request branch: ${err}`);
          }

    # Create a pull request for review
    - name: 'Create/Update Pull Request'
      id: 'create-update-pull-request'
      uses: 'actions/github-script@98814c53be79b1d30f795b907e553d8679345975' # ratchet:actions/github-script@v6
      env:
        DRAFT: '${{ inputs.draft }}'
        HEAD_BRANCH: '${{ inputs.head_branch }}'
        BASE_BRANCH: '${{ inputs.base_branch }}'
        PR_TITLE: '${{ inputs.pull_request_title }}'
        PR_BODY: '${{ inputs.pull_request_body }}'
      with:
        github-token: '${{ inputs.token }}'
        retries: '${{ inputs.max_retries }}'
        script: |-
          try {
            const draft = JSON.parse(process.env.DRAFT);
            const headRef = process.env.HEAD_BRANCH;
            const baseRef = process.env.BASE_BRANCH;;

            const listResponse = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              head: process.env.HEAD_BRANCH,
              base: process.env.BASE_BRANCH,
            });

            core.debug(`listResponse: ${listResponse}`);

            if (!listResponse.data.length) {
              core.info(`Creating pull request:
                owner: ${context.repo.owner}
                repo:  ${context.repo.repo}
                head:  ${headRef}
                base:  ${baseRef}
              `);

              const createResponse = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: headRef,
                base: baseRef,
                defat: draft,
                title: process.env.PR_TITLE,
                body: process.env.PR_BODY,
              });

              core.info(
                `Created PR #${createResponse.data.number} at ${createResponse.data.html_url}`
              );
            } else {
              core.info(`Updating pull request: 
                owner:       ${context.repo.owner}
                repo:        ${context.repo.repo}
                pull_number: ${listResponse.data[0].number}
              `);

              const updateResponse = await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: listResponse.data[0].number,
                title: process.env.PR_TITLE,
                body: process.env.PR_BODY,
              });

              core.info(
                `Updated PR #${updateResponse.data.number} at ${updateResponse.data.html_url}`
              );
            }
          } catch (err) {
            core.error(err);
            core.setFailed(`Failed to create/update pull request: ${err}`);
          }
