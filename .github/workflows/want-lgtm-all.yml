name: 'want-lgtm-all'

on:
  pull_request:
    types:
      - opened
      - edited
      - reopened
      - synchronize
      - ready_for_review
      - review_requested
      - review_request_removed
  pull_request_review:
    types:
      - submitted
      - dismissed
      - edited
  workflow_call:
  workflow_dispatch:

permissions:
  actions: 'write'
  pull-requests: 'read'

jobs:
  validate:
    runs-on: 'ubuntu-latest'
    steps:
      - id: 'validate-reviewers'
        uses: 'actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410' # ratchet:actions/github-script@v6
        with:
          retries: 3
          script: |-
            // validate the event name and exit with error
            if (!["pull_request", "pull_request_review"].includes(context.eventName)) {
              core.setFailed(
                "want-lgtm-all only supports the pull_request and pull_request_review event triggers. Please modify your workflow and try again."
              );
              return;
            }

            const body = context.payload.pull_request.body || "";

            // if PR body does not contain want_lgtm_all, exit gracefully
            if (!body.match(/want_lgtm_all/gim)) {
              core.info("PR body does not contain want_lgtm_all");
              return;
            }

            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            if (reviews.length === 0) {
              core.setFailed(
                "At least one reviewer is required when specifying want_lgtm_all. Please add a reviewer or remove want_lgtm_all from the PR body."
              );
              return;
            }

            core.info(
              "Completed reviews: " + JSON.stringify(reviews.map((r) => r.user?.login))
            );

            let { data: activeReviewers } = await github.rest.pulls.listRequestedReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const usersStillNeedingApproval = activeReviewers.users.map((u) => u.login);

            core.info(
              "Users still needing approval: " + JSON.stringify(usersStillNeedingApproval)
            );

            if (usersStillNeedingApproval.length > 0) {
              core.setFailed(
                "Waiting on Approval from " + usersStillNeedingApproval.join(", ")
              );
              return;
            }

            // get the filename for this workflow
            var workflowFilename = process.env.GITHUB_WORKFLOW_REF.split("@")[0]
              .split("/")
              .pop();

            // when a pull_request_review is submitted and all required reviewers have approved
            // we need to re-trigger any previously failed pull_request event for our workflow
            // this is because pull_request and pull_request_review are seen as two different
            // status checks by github
            if (context.eventName == "pull_request_review") {
              // get all workflow runs for our file and this pull request head sha
              let workflows = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflowFilename,
                head_sha: context.payload.pull_request.head.sha,
                event: "pull_request",
              });

              // get all unsuccessful previous runs for our workflows
              let unsuccessfulRuns = workflows.data.workflow_runs
                .filter((w) => w.conclusion != "success")
                .filter((w) =>
                  w.pull_requests?.map((p) => p.number).includes(context.issue.number)
                )
                .sort((x) => x.run_number);

              console.log(unsuccessfulRuns);

              // retrigger the latest run for our unsuccessful workflow run
              if (unsuccessfulRuns.length > 0) {
                await github.rest.actions.reRunWorkflow({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: unsuccessfulRuns[0].id,
                });
              }
            }
