name: 'dispatch_test'
run-name: 'dispatch_test[${{ github.event.client_payload.uuid }}]'

on:
  repository_dispatch:
    types:
      - 'test'

jobs:
  plan:
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744' # ratchet:actions/checkout@v3

      - name: 'Setup OPA'
        uses: 'open-policy-agent/setup-opa@v2'
        with:
          version: 'latest'

      - uses: 'actions/github-script@v7'
        with:
          github-token: '${{ secrets.READ_TEAMS }}'
          script: |-
            const fs = require("fs/promises");
            const tmpDir = process.env["RUNNER_TEMP"];

            const res = await github.graphql(
              `
              query paginate($cursor: String, $owner: String!, $user: String!) {
                organization(login: $owner) {
                  teams(first: 100, after: $cursor, userLogins: [$user]) {
                    totalCount
                    nodes {
                      name
                    }
                    pageInfo {
                      hasNextPage
                      endCursor
                    }
                  }
                }
              }
              `,
              {
                owner: context.repo.owner,
                user: context.actor,
              }
            );
            console.log(res);

            const teams = res.data.organization.teams.nodes.map((n) => n.name);
            console.log(teams);

            const data = {
              teams: teams,
            };

            await fs.writeFile(`${tmpDir}/teams.json`, JSON.stringify(data), {
              encoding: "utf8",
            });

      - name: 'Validate'
        env:
          UUID: '${{ github.event.client_payload.uuid }}'
          TEAMS_PATH: '${{ runner.temp }}/teams.json'
        shell: 'bash'
        run: |-
          set +eo
          echo "[START-${UUID}]"
          INPUT=$(jq -s '{ "event": .[0], "teams": .[1].teams }' $GITHUB_EVENT_PATH $TEAMS_PATH)
          OUT=$(echo $INPUT | opa eval --bundle policy --stdin-input --format values --fail-defined "data.guardian.deny[message]")
          EXIT=$(echo $?)
          echo $OUT
          echo "[END-${UUID}]"
          exit $EXIT

      - name: 'Setup Terraform'
        uses: 'hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36' # ratchet:hashicorp/setup-terraform@v3

      - name: 'Command'
        env:
          UUID: '${{ github.event.client_payload.uuid }}'
          COMMAND: '${{ github.event.client_payload.command }}'
        shell: 'bash'
        run: |-
          set -x
          echo "[START-${UUID}]"
          terraform -chdir="terraform" init -input=false -no-color
          $COMMAND
          echo "[END-${UUID}]"
